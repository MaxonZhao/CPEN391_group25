--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode517w[1..0]	: WIRE;
	w_anode526w[3..0]	: WIRE;
	w_anode543w[3..0]	: WIRE;
	w_anode553w[3..0]	: WIRE;
	w_anode563w[3..0]	: WIRE;
	w_anode573w[3..0]	: WIRE;
	w_anode583w[3..0]	: WIRE;
	w_anode593w[3..0]	: WIRE;
	w_anode603w[3..0]	: WIRE;
	w_anode615w[1..0]	: WIRE;
	w_anode622w[3..0]	: WIRE;
	w_anode633w[3..0]	: WIRE;
	w_anode643w[3..0]	: WIRE;
	w_anode653w[3..0]	: WIRE;
	w_anode663w[3..0]	: WIRE;
	w_anode673w[3..0]	: WIRE;
	w_anode683w[3..0]	: WIRE;
	w_anode693w[3..0]	: WIRE;
	w_data515w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode693w[3..3], w_anode683w[3..3], w_anode673w[3..3], w_anode663w[3..3], w_anode653w[3..3], w_anode643w[3..3], w_anode633w[3..3], w_anode622w[3..3]), ( w_anode603w[3..3], w_anode593w[3..3], w_anode583w[3..3], w_anode573w[3..3], w_anode563w[3..3], w_anode553w[3..3], w_anode543w[3..3], w_anode526w[3..3]));
	w_anode517w[] = ( (w_anode517w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode526w[] = ( (w_anode526w[2..2] & (! w_data515w[2..2])), (w_anode526w[1..1] & (! w_data515w[1..1])), (w_anode526w[0..0] & (! w_data515w[0..0])), w_anode517w[1..1]);
	w_anode543w[] = ( (w_anode543w[2..2] & (! w_data515w[2..2])), (w_anode543w[1..1] & (! w_data515w[1..1])), (w_anode543w[0..0] & w_data515w[0..0]), w_anode517w[1..1]);
	w_anode553w[] = ( (w_anode553w[2..2] & (! w_data515w[2..2])), (w_anode553w[1..1] & w_data515w[1..1]), (w_anode553w[0..0] & (! w_data515w[0..0])), w_anode517w[1..1]);
	w_anode563w[] = ( (w_anode563w[2..2] & (! w_data515w[2..2])), (w_anode563w[1..1] & w_data515w[1..1]), (w_anode563w[0..0] & w_data515w[0..0]), w_anode517w[1..1]);
	w_anode573w[] = ( (w_anode573w[2..2] & w_data515w[2..2]), (w_anode573w[1..1] & (! w_data515w[1..1])), (w_anode573w[0..0] & (! w_data515w[0..0])), w_anode517w[1..1]);
	w_anode583w[] = ( (w_anode583w[2..2] & w_data515w[2..2]), (w_anode583w[1..1] & (! w_data515w[1..1])), (w_anode583w[0..0] & w_data515w[0..0]), w_anode517w[1..1]);
	w_anode593w[] = ( (w_anode593w[2..2] & w_data515w[2..2]), (w_anode593w[1..1] & w_data515w[1..1]), (w_anode593w[0..0] & (! w_data515w[0..0])), w_anode517w[1..1]);
	w_anode603w[] = ( (w_anode603w[2..2] & w_data515w[2..2]), (w_anode603w[1..1] & w_data515w[1..1]), (w_anode603w[0..0] & w_data515w[0..0]), w_anode517w[1..1]);
	w_anode615w[] = ( (w_anode615w[0..0] & data_wire[3..3]), enable_wire);
	w_anode622w[] = ( (w_anode622w[2..2] & (! w_data515w[2..2])), (w_anode622w[1..1] & (! w_data515w[1..1])), (w_anode622w[0..0] & (! w_data515w[0..0])), w_anode615w[1..1]);
	w_anode633w[] = ( (w_anode633w[2..2] & (! w_data515w[2..2])), (w_anode633w[1..1] & (! w_data515w[1..1])), (w_anode633w[0..0] & w_data515w[0..0]), w_anode615w[1..1]);
	w_anode643w[] = ( (w_anode643w[2..2] & (! w_data515w[2..2])), (w_anode643w[1..1] & w_data515w[1..1]), (w_anode643w[0..0] & (! w_data515w[0..0])), w_anode615w[1..1]);
	w_anode653w[] = ( (w_anode653w[2..2] & (! w_data515w[2..2])), (w_anode653w[1..1] & w_data515w[1..1]), (w_anode653w[0..0] & w_data515w[0..0]), w_anode615w[1..1]);
	w_anode663w[] = ( (w_anode663w[2..2] & w_data515w[2..2]), (w_anode663w[1..1] & (! w_data515w[1..1])), (w_anode663w[0..0] & (! w_data515w[0..0])), w_anode615w[1..1]);
	w_anode673w[] = ( (w_anode673w[2..2] & w_data515w[2..2]), (w_anode673w[1..1] & (! w_data515w[1..1])), (w_anode673w[0..0] & w_data515w[0..0]), w_anode615w[1..1]);
	w_anode683w[] = ( (w_anode683w[2..2] & w_data515w[2..2]), (w_anode683w[1..1] & w_data515w[1..1]), (w_anode683w[0..0] & (! w_data515w[0..0])), w_anode615w[1..1]);
	w_anode693w[] = ( (w_anode693w[2..2] & w_data515w[2..2]), (w_anode693w[1..1] & w_data515w[1..1]), (w_anode693w[0..0] & w_data515w[0..0]), w_anode615w[1..1]);
	w_data515w[2..0] = data_wire[2..0];
END;
--VALID FILE
