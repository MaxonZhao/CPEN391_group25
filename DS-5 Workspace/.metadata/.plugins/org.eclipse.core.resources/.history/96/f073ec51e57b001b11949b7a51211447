// /*
//  * RS232.c
//  *
//  *  Created on: Mar 1, 2021
//  *      Author: zoeyli
//  */

// #include <stdio.h>
// #include <string.h>

// #include "serial.h"
// /**************************************************************************
// **  Subroutine to initialize the RS232 Port by writing some data
// **  to the internal registers.
// **  Call this function at the start of the program before you attempt
// **  to read or write to data via the RS232 port
// **
// **  Refer to UARTdata sheet for details of registers and programming
// ***************************************************************************/

// void Init_RS232(void){
//     printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     // set bit 7 of Line Control Register to 1, to gain access to the baud rate registers
//     RS232_LineControlReg =  0x80;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     // set Divisor latch (LSB and MSB) with correct value for required baud rate
//     //baud rate divisor value=freq of BR_clk/ (desired buad rate*16)
//     //here buad rate = 9600
//     RS232_DivisorLatchLSB = 0x45;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     RS232_DivisorLatchMSB = 0x01;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     // set bit 7 of Line control register back to 0 and
//     //RS232_LineControlReg = RS232_LineControlReg & 0x7F;
//     // program other bits in that reg for 8 bit data, 1 stop bit, no parity etc
//     //bit 1-0 = 11, bit 2 =0, bit 3 = 0
//     RS232_LineControlReg = 0x03;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     // Reset the Fifo in the FiFo Control Reg by setting bits 1 & 2 to 1
//     RS232_FifoControlReg = RS232_FifoControlReg | 0x07;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);
//     // Now Clear all bits in the FiFo control registers
//     RS232_FifoControlReg = 0x00;
//         printf("RS232_LineControlReg:%X, RS232_DivisorLatchLSB: %X, RS232_DivisorLatchMSB: %X, RS232_FifoControlReg: %X, RS232_LineStatusReg:%X\n",RS232_LineControlReg,RS232_DivisorLatchLSB,RS232_DivisorLatchMSB, RS232_FifoControlReg,RS232_LineStatusReg);

// }

// // the following function polls the UART to determine if any character
// // has been received. It doesn't wait for one,or read it, it simply tests
// // to see if one is available to read from the FIFO

// int RS232_TestForReceivedData(void){
//     // if RS232_LineStatusReg bit 0 is set to 1
//     //return TRUE, otherwise return FALSE
//     if((RS232_LineStatusReg & 0x01)== 0x01){
//         return 1;
//     }
//     else return 0;

// }

// int putcharRS232(int c){
//     // wait for Transmitter Holding Register bit (5) of line status register to be '1'
//     // indicating we can write to the device
//     while((RS232_LineStatusReg  & 0x20)!= 0x20);

//     // write character to Transmitter fifo register
//     RS232_TransmitterFifo = (char)c;
//     // return the character we printed
//     return c;
// }

// int getcharRS232( void){
// 	int data;
//     // wait for Data Ready bit (0) of line status register to be '1'
//     while(!RS232_TestForReceivedData()){}
//     // read new character from ReceiverFiFo register
//     data = RS232_ReceiverFifo;
//     // return new character
//     return data;
// }

// //
// // Remove/flush the UART receiver buffer by removing any unread characters
// //
// void RS232_Flush(void){
//     int unreadChar;
//     // while bit 0 of Line Status Register == "1"
//     while(RS232_TestForReceivedData()){
//         // read unwanted char out of fifo receiver buffer
//         unreadChar = RS232_ReceiverFifo;
//     }

//     return;
//     // no more characters so return
// }

// void main(void){
// 	char a,b,c;

// 	int i ;
// 	printf("testing:    ");
// 	a = '7';

// 	Init_RS232();
// 	for (i = 0; i < 5; i++) {
// 		b=putcharRS232(i);
// 		c = getcharRS232();
// 		printf("getchar should be %d : %d\n", b,c);
// 	}
// 	while(1) {
// 		c = getcharRS232();
// 		printf("getchar: %d\n",c);
// 	}

// }


/*
 * bluetooth.c
 *
 *  Created on: Feb 28, 2021
 *      Author: zoeyli
 */
#include <stdio.h>
#include <string.h>

#include "serial.h"
/**************************************************************************
**  Subroutine to initialize the BT Port by writing some data
**  to the internal registers.
**  Call this function at the start of the program before you attempt
**  to read or write to data via the BT port
**
**  Refer to UARTdata sheet for details of registers and programming
***************************************************************************/

void Init_BT(void){
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);
  
    // set bit 7 of Line Control Register to 1, to gain access to the baud rate registers
    BT_LineControlReg = 0x80;
    // set Divisor latch (LSB and MSB) with correct value for required baud rate
    //baud rate divisor value=freq of BR_clk/ (desired buad rate*16)
    //here buad rate = 115200
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);
    BT_DivisorLatchLSB = 0x1B;
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);
    BT_DivisorLatchMSB = 0x00;
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);
    // set bit 7 of Line control register back to 0 and
    // BT_LineControlReg = BT_LineControlReg & 0x7F;
    // printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg);
    // program other bits in that reg for 8 bit data, 1 stop bit, no parity etc
    //bit 1-0 = 11, bit 2 =0, bit 3 = 0
    BT_LineControlReg = 0x03;
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);

      // Reset the Fifo in the FiFo Control Reg by setting bits 1 & 2 to 1
    BT_FifoControlReg = 0x07;
//printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X, BT_LineStatusReg:%X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg,BT_LineStatusReg);
    // // Now Clear all bits in the FiFo control registers
    BT_FifoControlReg = 0x01;
    //printf("BT_LineControlReg:%X, BT_DivisorLatchLSB: %X, BT_DivisorLatchMSB: %X, BT_FifoControlReg: %X\n",BT_LineControlReg,BT_DivisorLatchLSB,BT_DivisorLatchMSB, BT_FifoControlReg);

}

// the following function polls the UART to determine if any character
// has been received. It doesn't wait for one,or read it, it simply tests
// to see if one is available to read from the FIFO

int BT_TestForReceivedData(void){
    // if BT_LineStatusReg bit 0 is set to 1
    //return TRUE, otherwise return FALSE
    //printf("BT_LineStatusReg:%X\n",BT_LineStatusReg);
    if((BT_LineStatusReg & 0x01)== 0x01){
        return 1;
    }
    else return 0;

}

int putcharBT(int c){
    // wait for Transmitter Holding Register bit (5) of line status register to be '1'
    // indicating we can write to the device
    while((BT_LineStatusReg  & 0x20)!= 0x20);

    // write character to Transmitter fifo register
    BT_TransmitterFifo = c;
    // return the character we printed
    return c;
}

int getcharBT( void){
	int data;
    // wait for Data Ready bit (0) of line status register to be '1'
    while(!BT_TestForReceivedData()){}
    // read new character from ReceiverFiFo register
    data = BT_ReceiverFifo;
    // return new character
    return data;
}

//
// Remove/flush the UART receiver buffer by removing any unread characters
//
void BT_Flush(void){
    int unreadChar;
    // while bit 0 of Line Status Register == "1"
    while(BT_TestForReceivedData()){
        // read unwanted char out of fifo receiver buffer
        unreadChar = BT_ReceiverFifo;
    }

    return;
    // no more characters so return
}


void BTOutMessage(char* message){
	for(int i = 0; i < strlen(message); i ++){
		int c = putcharBT((int)message[i]);
	}
	putcharBT('\r');
	putcharBT('\n');
}


int main(void){
    Init_BT();
    BT_Flush();

    printf("Bluetooth initialized\n");

	int data = 0x41;
	putcharBT(data);
    putcharBT(data+1);
    putcharBT(data+2);
    BTOutMessage("Hello from arm processor");

	while(1){
		int data_r = getcharBT();
		printf("receive: %d, %c\n",data_r,data_r);
	}

    return 0;
}

// void bluetoothListen() {
// 	while (1){
// 		int data = getcharBT();
// 		printf("%d",data);
// 	}
// }

